###########
# INSTALL #
###########

pacman -S java-runtime-common jdk7-openjdk # java-runtime-common could be superfluous
pacman -U leiningen # get from AUR

#################
# EDITOR & LEIN #
#################

https://github.com/vim-scripts/paredit.vim

# Unzip as:

├── doc
│   └── paredit.txt
├── plugin
│   └── paredit.vim
└── README

# Install fireplace & apply patch
# for browser REPL integration

https://github.com/tpope/vim-fireplace

# Patch
https://gist.github.com/malyn/646e291d01101dcc8b48#file-vim-fireplace-figwheel-diff

# UNzip and you end up with:

├── autoload
│   └── fireplace
│       ├── nrepl_connection.vim
│       └── nrepl.vim
├── doc
│   └── paredit.txt
├── plugin
│   ├── fireplace
│   │   └── zip.vim
│   ├── fireplace.vim
│   └── paredit.vim
└── python
    └── nrepl_fireplace.py

# Test it works in vim
# by opening a .clj file.
# NOTE if you edit a NON .clj file,
# the installed plugins don't work

vim test.clj

# Configure vim further to suit my editing style

cat > ~/.vim/after/ftplugin/clojure.vim << EOF
setlocal sw=2
setlocal tabstop=2
EOF

# Modify paredit.vim so it doesn't do indentation the "clojure way"
# by commenting the "filetype indent on" line in the file ~/.vim/plugin/paredit.vim

"filetype indent on

# Lein command

lein repl

# Connect to repl with vim,
# fireplace is resposible for this

:Connect

# Slurp/Barf
# Assuming , is vim's LEADER key

,<
,>

# Evaluating clojure in vim

cpp

https://github.com/tpope/vim-fireplace#evaluating-from-the-buffer

####################################
# Create project based on chestnut #
####################################

lein new chestnut myproject2

# For vanilla install

lein new myproject2

###########################
# RUN CHESTNUT WEB SERVER #
###########################

cd myproject2
lein repl
(run)

###########################
# RUN FIGWHEEL WEB SERVER #
###########################

lein new figwheel myproject2
cd mproject2
lein figwheel

##############
# COMPILE JS #
##############

# While inside myproject2

lein clean
lein cljsbuild once release

# 'release' is defined in myproject2/project.clj, find the line looking like:

:cljsbuild {:build {:release

See README.md

###########
# REAGENT #
###########

-> is a macro that converts (-> .-target .-value) to (.-value (.-target %))

the '-' in -value and -target makes value and target non-callable

(swap! atom function extra_arguments)

# Watches and automatically build the files 
cljsbuild auto

# Just build once
cljsbuild once
:whitespace
:advance
