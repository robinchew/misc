#AFTER 1st INSTALL
sudo mkdir -p /srv/postgres/data
sudo chown postgres /srv/postgres/data
sudo -u postgres initdb -D /srv/postgres/data

Change to the following line in /usr/lib/systemd/system/postgresql.service

    Environment=PGROOT=/srv/postgres
    PIDFile=/srv/postgres/data/postmaster.pid

# Allow LAN connection 
#edit /etc/postgresql/..../postgresql.conf
listen_addresses = '*' # allow all connections

#SSL
#edit /etc/postgresql/..../postgresql.conf
ssl=true

#STAT DAEMON
su -l _postgresql -c "nohup /usr/local/bin/pg_ctl start -D /var/postgresql/data -l /var/postgresql/logfile -o '-D /var/postgresql/data' >/dev/null"

#SHOW USERS/GROUPS
\dS
select * from pg_user
select * from pg_group

#GROUPS
CREATE GROUP name;

ALTER GROUP name ADD USER uname1, ... ;
ALTER GROUP name DROP USER uname1, ... ;

DROP GROUP name;
SELECT groname FROM pg_group;

The psql program's \dg meta-command is also useful for listing the existing groups.

#ALTER OWNER FOR ALL TABLES
select 'alter table '|| tablename ||' owner to ar_group;' from pg_tables where schemaname = 'public';

#ADD USER
sudo -u postgres createuser -D -A -P -R myuser

OR

in psql: 
CREATE USER robin
ALTER USER robin WITH PASSWORD 'mypassword'
ALTER USER robin WITH CREATEDB

OR

CREATE ROLE robn LOGIN ENCRYPTED PASSWORD 'my_password' NOINHERIT VALID UNTIL 'infinity';

sudo -u postgres createdb -O myuser mydb

-D, --no-createdb
The new user is not allowed to create databases. 

-A, --no-adduser
The new user is not allowed to create other users (i.e., the new user is a regular user not a superuser). 

-P, --pwprompt

-R, --no-createrole

#then copy the lines and paste

#CREATE
create table mytable(
  id serial primary key,
  name varchar(20),
  grup_id integer,
  FOREIGN KEY (grup_id) references grup (id)
)

#ALTER
ALTER DATABASE name OWNER TO new_owner
ALTER TABLE name OWNER TO new_owner
ALTER GROUP name OWNER TO new_owner
                RENAME TO
ALTER TABLE distributors ADD CONSTRAINT distfk FOREIGN KEY (address) REFERENCES addresses(address) MATCH 

#CHANGE USER
\c


#SEQUENCE/SERIAL AUTO-INCREMENT ID
CREATE SEQUENCE car_id_seq
ALTER TABLE car ALTER COLUMN id SET DEFAULT nextval('car_id_seq');
SELECT setval('car_id_seq', 72); 


#GROUPS
17.3. Groups

As in Unix, groups are a way of logically grouping users to ease management of privileges: privileges can be granted to, or revoked from, a group as a whole. To create a group, use the CREATE GROUP SQL command:
CREATE GROUP name;

To add users to or remove users from an existing group, use ALTER GROUP:
ALTER GROUP name ADD USER uname1, ... ;
ALTER GROUP name DROP USER uname1, ... ;

To destroy a group, use DROP GROUP:
DROP GROUP name;

This only drops the group, not its member users. 

To determine the set of existing groups, examine the pg_group system catalog, for example
SELECT groname FROM pg_group;

The psql program's \dg meta-command is also useful for listing the existing groups.

#CHANGE USER
\c

#GRANT/REVOKE
grant select on car to viewer;
grant select on bodytype,brand,car,colour,enginetype,fueltype,generation,image,model,postcode,transmission to viewer;
GRANT { { SELECT | INSERT | UPDATE | DELETE | RULE | REFERENCES | TRIGGER }
    [,...] | ALL [ PRIVILEGES ] }
    ON [ TABLE ] tablename [, ...]
    TO { username | GROUP groupname | PUBLIC } [, ...] [ WITH GRANT OPTION ]

GRANT { { CREATE | TEMPORARY | TEMP } [,...] | ALL [ PRIVILEGES ] }
    ON DATABASE dbname [, ...]
    TO { username | GROUP groupname | PUBLIC } [, ...] [ WITH GRANT OPTION ]
#JOIN
SELECT * FROM weather INNER JOIN cities ON (weather.city = cities.name);

#################
#ALTERING TABLES#
#################
ALTER TABLE distributors:

#UNIQUE
ADD CONSTRAINT dist_id_zipcode_key UNIQUE (dist_id, zipcode);

#FOREIGN KEY
DROP CONSTRAINT registration_user_phone_areacode_id_fkey;
ADD CONSTRAINT registration_user_phone_areacode_id_fkey FOREIGN KEY(phone_areacode_id) REFERENCES "registration_indophoneareacode" ("id");
ADD COLUMN "phone_areacode_id" integer NULL REFERENCES "registration_indophoneareacode" ("id");


#PRIMARY KEY
DROP CONSTRAINT registration_indophoneareacode_pkey;

#try
ADD PRIMARY KEY(id)
#else
CREATE SEQUENCE registration_indophoneareacode_id_seq increment 1 minvalue 1 maxvalue 9223372036854775807 start 408 cache 1;
ALTER TABLE registration_indophoneareacode_id_seq OWNER TO ar_admin
ADD PRIMARY KEY(id) default nextval('registration_indophoneareacode_id_seq');

#PL/PGSQL script
#for looping, code below needs test to confirm it works
create or replace function testf(argnum integer, argname varchar, argnum2 integer) 
returns void as $body$
    declare
        varnum integer;
    begin
        for i in 1..argnum loop
            insert into group values (argnum2, argname);
        end loop;
    end;
$body$
language plpgsql;

select testf()

#BACKUP AND RESTORE
http://www.cyberciti.biz/tips/howto-backup-postgresql-databases.html
# backup a db
pg_dump autoritel | gzip -c > autoritel.out.gz
# or backup all dbs
pg_dumpall

#restore/run script
gunzip autoritel.out.gz
psql -d autoritel -f autoritel.out

# QUERY profiling
EXPLAIN ANALYZE SELECT authors.name, books.title 
FROM books, authors 
WHERE books.author_id=16 and authors.id = books.author_id 
ORDER BY books.title; 

http://www.revsys.com/writings/postgresql-performance.html

# REAL TIME profiling
use program called: pgtop 
or: ptop

# RUN SQL FROM COMMAND LINE
psql -d autoritel -c "alter table cars_car rename column product_id to product_ptr_id;"
#below is possibly wrong
psql -C alter table cars_car rename column product_id to product_ptr_id;

# UPGRADE POSTGRESQL

sudo pacman -S --needed postgresql-old-upgrade

# Do the following commands as user 'postgres'
sudo su postgres
mv /var/lib/postgres/data /var/lib/postgres/data-9.1
mkdir /var/lib/postgres/data
initdb -D /var/lib/postgres/data
pg_upgrade -b /opt/pgsql-9.1/bin/ -B /usr/bin/ -d /var/lib/postgres/data-9.1 -D /var/lib/postgres/data

# Output of select query fits all columns in one screen and wrapped
\pset format wrapped
