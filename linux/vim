#search matching lines and yank all of them into register 'a' and for immediate pasting  
#http://vim.wikia.com/wiki/Copy_the_search_results_into_clipboard
 
  #clears register a first
  0"ay0 
  
  #yank all matches to register a, no need to care about a, just paste immediately
  g/match/y A

#copy register to clipboard
  let @+ = @a

# Copy matches of the last search to a register (default is the clipboard).
# Accepts a range (default is whole file).
# 'CopyMatches'   copies matches to clipboard (each match has \n added).
# 'CopyMatches x' copies matches to register x (clears register first).
# 'CopyMatches X' appends matches to register x.
command! -range=% -register CopyMatches call s:CopyMatches(<line1>, <line2>, '<reg>')
function! s:CopyMatches(line1, line2, reg)
  let reg = empty(a:reg) ? '+' : a:reg
  if reg =~# '[A-Z]'
    let reg = tolower(reg)
  else
    execute 'let @'.reg.' = ""'
  endif
  for line in range(a:line1, a:line2)
    let txt = getline(line)
    let idx = match(txt, @/)
    while idx >= 0
      execute 'let @'.reg.' .= matchstr(txt, @/, idx) . "\n"'
      let end = matchend(txt, @/, idx)
      let idx = match(txt, @/, end)
    endwhile
  endfor
endfunction



#Quantifier
*          matches 0 or more of the preceding characters, ranges or
           metacharacters .* matches everything including empty line
\+         matches 1 or more of the preceding characters...
\=         matches 0 or 1 more of the preceding characters...
\{n,m}     matches from n to m of the preceding characters...
\{n}       matches exactly n times of the preceding characters...
\{,m}      matches at most m (from 0 to m) of the preceding characters...
\{n,}      matches at least n of of the preceding characters...
                              where n and m are positive integers (>0)

#eg. REPLACE MULTIPLE LINES
<,'>s:\(pk"\: \)\(\d*\)\(.*\n.*\n.*\n\):\1\2\3"code"\:\2,:g


set paste #so indentation wont get affected http://stackoverflow.com/revisions/58794/list
